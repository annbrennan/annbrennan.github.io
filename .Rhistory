getwd()
library(tidyverse)
ggplot(diamonds, aes(carat, price)) +
geom_hex()
ggsave("diamonds.png") # to save ggplot as a png file.
write_csv(diamonds, "diamonds.csv") # to save data.frame as a csv file
getwd()
git add .
git commit -m “ANY_MASSAGE”
git push -u origin main
git add .
git commit -m “ANY_MASSAGE”
git push -u origin main
git add .
git commit -m “ANY_MASSAGE”
git push -u origin main
library(tidyverse)
table1
table2
table3
# Spread across two tibbles
table4a  # cases
table4b
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases")
library(tidyverse)
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = clarity),
alpha = .2) +
scale_color_tableau()
library(skimr)
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = clarity),
alpha = .2) +
scale_color_tableau()
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = clarity),
alpha = .2) +
scale_color_economist()
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = clarity),
alpha = .2) +
scale_color_economist()
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = clarity),
alpha = .2) +
scale_color_tableau()
install.packages("hrbrthemes")
library(hrbrthemes)
table1
table2
table3
# Spread across two tibbles
table4a  # cases
table4b
table4a
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases")
table2
table2 %>%
pivot_wider(names_from = type, values_from = count)
# separate
# separate() takes the name of the column to separate, and the names of the columns to separate into
table3
table3 %>%
separate(rate, into = c("cases", "population"))
table3 %>%
separate(rate, into = c("cases", "population"), sep = "/")
table3 %>%
separate(year, into = c("century", "year"), sep = 2)
table5 %>%
unite(new, century, year)
table5 %>%
unite(new, century, year, sep = "")
library(tidyverse)
library(skimr)
billboard <- read_csv('https://bcdanl.github.io/data/billboard.csv')
ny_pincp <- read_csv('https://bcdanl.github.io/data/NY_pinc_wide.csv')
covid <- read_csv('https://bcdanl.github.io/data/covid19_cases.csv')
q1a <- billboard %>%
pivot_longer(cols = wk1:wk76,
names_to = "week",
values_to = "rating")
q1a <- billboard %>%
pivot_longer(cols = wk1:wk76,
names_to = "week",
values_to = "rating") %>%
filter(week %in% c('wk1', 'wk2', 'wk3'))
ggplot(q1a,
aes(x = rating)) +
geom_histogram() +
facet_wrap(.~ week)
## Q2a
library(tidyverse)
beer_data <- read_csv("https://bcdanl.github.io/data/beer_markets.csv")
beer_markets <- read_csv("https://bcdanl.github.io/data/beer_markets.csv")
top_5 <- beer_mkts %>%
group_by(market) %>%
summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>%
arrange(-beer_floz_tot) %>%
slice(1:5)
beer_mkts <- read_csv("https://bcdanl.github.io/data/beer_markets.csv")
top_5 <- beer_mkts %>%
group_by(market) %>%
summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>%
arrange(-beer_floz_tot) %>%
slice(1:5)
top_5_bud <- beer_mkts %>%
filter(brand == "BUD LIGHT") %>%
group_by(market) %>%
summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>%
arrange(-beer_floz_tot) %>%
slice(1:5)
top_5_natural <- beer_mkts %>%
filter(brand == "NATURAL LIGHT") %>%
group_by(market) %>%
summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>%
arrange(-beer_floz_tot) %>%
slice(1:5)
top_5_miller <- beer_mkts %>%
filter(brand == "MILLER LITE") %>%
group_by(market) %>%
summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>%
arrange(-beer_floz_tot) %>%
slice(1:5)
top_5_coors <- beer_mkts %>%
filter(brand == "COORS LIGHT") %>%
group_by(market) %>%
summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>%
arrange(-beer_floz_tot) %>%
slice(1:5)
top_5_miller <- beer_mkts %>%
filter(brand == "MILLER LITE") %>%
group_by(market) %>%
summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>%
arrange(-beer_floz_tot) %>%
slice(1:5)
top_5_coors <- beer_mkts %>%
filter(brand == "COORS LIGHT") %>%
group_by(market) %>%
summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>%
arrange(-beer_floz_tot) %>%
slice(1:5)
top_5_busch <- beer_mkts %>%
filter(brand == "BUSCH LIGHT") %>%
group_by(market) %>%
summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %>%
arrange(-beer_floz_tot) %>%
slice(1:5)
ggplot(beer_mkts) +
geom_bar(aes(x = market %in% top_5, y = beer_floz_tot))
ggplot(beer_mkts) +
geom_bar(aes(x = market %in% top_5, y = beer_floz))
ggplot(top_5) +
geom_bar(aes(x = market, y = beer_floz_tot))
ggplot(top_5) +
geom_boxplot(aes(x = market, y = beer_floz_tot))
ggplot(top_5) +
geom_bar(aes(x = market, y = beer_floz_tot))
ggplot(top_5, aes(x = market, y = beer_floz_tot)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 5 Beer Markets",
x = "Market",
y = "Total Beer (floz)")
The following describes the variables in the `beer_mkts` data.frame.
- `hh`: Household identifier
ggplot(top_5_bud, aes(x = market, y = beer_floz_tot)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Beer Markets - Bud Light",
x = "Market",
y = "Total Beer (floz)")
loyal_customers <- beer_mkts %>%
mutate(bud = ifelse(brand=="BUD LIGHT", 1, 0), # 1 if brand=="BUD LIGHT"; 0 otherwise
busch = ifelse(brand=="BUSCH LIGHT", 1, 0),
coors = ifelse(brand=="COORS LIGHT", 1, 0),
miller = ifelse(brand=="MILLER LITE", 1, 0),
natural = ifelse(brand=="NATURAL LIGHT", 1, 0),
.after = hh) %>%
select(hh:natural) %>%  # select the variables we need
group_by(hh) %>%
summarise(n_transactions = n(), # number of beer transactions for each hh
n_bud = sum(bud), # number of BUD LIGHT transactions for each hh
n_busch = sum(busch),
n_coors = sum(coors),
n_miller = sum(miller),
n_natural = sum(natural)
) %>%
summarise(loyal_bud = sum(n_transactions == n_bud) / sum(n_bud > 0),
# sum(n_transactions == n_bud) : the number of households that purchased BUD LIGHT only
# sum(n_bud > 0) : the number of households that purchased BUD LIGHT at least once.
loyal_busch = sum(n_transactions == n_busch) / sum(n_busch > 0),
loyal_coors = sum(n_transactions == n_coors) / sum(n_coors > 0),
loyal_miller = sum(n_transactions == n_miller) / sum(n_miller > 0),
loyal_natural = sum(n_transactions == n_natural) / sum(n_natural > 0)
)
ggplot(top_5_busch, aes(x = market, y = beer_floz_tot)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Beer Markets - Bud Light",
x = "Market",
y = "Total Beer (floz)")
ggplot(top_5_busch, aes(x = market, y = beer_floz_tot)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Beer Markets - Busch Light",
x = "Market",
y = "Total Beer (floz)")
top_10_songs <- spotify_all %>%
count(artist_name, track_name) %>%
arrange(-n) %>%
head(10)
spotify_all <- read_csv('https://bcdanl.github.io/data/spotify_all.csv')
top_10_songs <- spotify_all %>%
count(artist_name, track_name) %>%
arrange(-n) %>%
head(10)
top_10_songs
top_artists <- spotify_all %>%
group_by(artist_name) %>%
mutate(n_popular_artist = n()) %>%
ungroup() %>%
mutate( artist_ranking = dense_rank( desc(n_popular_artist) ) ) %>%
filter( artist_ranking <= 5) %>%
group_by(artist_name, track_name) %>%
mutate(n_popular_track = n()) %>%
group_by(artist_name) %>%
mutate(track_ranking = dense_rank( desc(n_popular_track) ) ) %>%
filter( track_ranking <= 2) %>%   # I just wanted to see the top two tracks for each artist
select(artist_name, artist_ranking, n_popular_artist, track_name, track_ranking, n_popular_track) %>%
distinct() %>%
arrange(artist_ranking, track_ranking)
top_artists
top_10_artists <- spotify_all %>%
group_by(artist_name) %>%
mutate(n_popular_artist = n()) %>%
ungroup() %>%
mutate( artist_ranking = dense_rank( desc(n_popular_artist) ) ) %>%
filter( artist_ranking <= 10)
# boxplot
ggplot(top_10_artists,
aes(x = pos, y = fct_reorder(artist_name, -artist_ranking)) ) +
geom_boxplot() +
stat_summary(
fun = mean,
color = 'red'
)
# histogram
ggplot(Q1c) +
geom_histogram(aes(x = pos), binwidth = 1) +
facet_grid(fct_reorder(artist_name, artist_ranking) ~ .  , switch = "y") +
theme(strip.text.y.left = element_text(angle = 0))
# histogram
ggplot(top_10_artists) +
geom_histogram(aes(x = pos), binwidth = 1) +
facet_grid(fct_reorder(artist_name, artist_ranking) ~ .  , switch = "y") +
theme(strip.text.y.left = element_text(angle = 0))
ggplot(top_10_songs, aes(x = track_name, y = n)) +
geom_bar()
ggplot(top_10_songs, aes(x = reorder(track_name, -n), y = n)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Songs on Spotify",
x = "Song",
y = "Number of Occurrences")
ggplot(top_10_songs, aes(x = reorder(track_name, -n), y = n)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Songs on Spotify",
x = "Song",
y = "Number of Occurrences") + coord_flip()
# Create a grouped bar plot
ggplot(top_artists, aes(x = reorder(artist_name, -artist_ranking), y = n_popular_artist, fill = as.factor(track_ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(title = "Top Artists and Their Top Tracks on Spotify",
x = "Artist",
y = "Number of Popular Tracks") +
scale_fill_manual(values = c("1" = "skyblue", "2" = "orange")) +  # Colors for tracks
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
ggplot(top_10_artists, aes(x = reorder(artist_name, -n), y = n)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Artists on Spotify",
x = "Artist",
y = "Number of Occurrences") + coord_flip()
ggplot(top_10_artists, aes(x = artist_name, y = n)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Artists on Spotify",
x = "Artist",
y = "Number of Occurrences") + coord_flip()
ggplot(top_10_artists, aes(x = artist_name, y = n_popular_artist)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Artists on Spotify",
x = "Artist",
y = "Number of Occurrences") + coord_flip()
ggplot(top_artists, aes(x = artist_name, y = n_popular_artist)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Artists on Spotify",
x = "Artist",
y = "Number of Occurrences") + coord_flip()
restaurant %>% group_by(GRADE) %>% skim(SCORE) %>% select(-n_missing)
restaurant <- read_csv('https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv')
restaurant %>% group_by(GRADE) %>% skim(SCORE) %>% select(-n_missing)
library(skimr)
restaurant %>% group_by(GRADE) %>% skim(SCORE) %>% select(-n_missing)
freq <- as.data.frame( table(restaurant$GRADE) )
prop <- as.data.frame( 100 * prop.table(table(restaurant$GRADE)) )
ggplot(restaurant) +
geom_boxplot(aes(x = SCORE, y = GRADE, fill = GRADE) ) +
facet_grid( `CRITICAL FLAG` ~ . )
ggplot(restaurant) +
geom_bar(aes(x = `CRITICAL FLAG`,
y = after_stat(prop), group = 1)) +
facet_grid( GRADE ~ BORO )
ggplot(restaurant) +
geom_histogram(aes(x = SCORE), binwidth = 1 ) +
facet_wrap( `CRITICAL FLAG` ~ GRADE, scales = 'free' )
