[
  {
    "objectID": "starwars2/starwars_df2.html",
    "href": "starwars2/starwars_df2.html",
    "title": "Starwars 2",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "starwars2/starwars_df2.html#variable-description-for-starwars-data.frame",
    "href": "starwars2/starwars_df2.html#variable-description-for-starwars-data.frame",
    "title": "Starwars 2",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "starwars2/starwars_df2.html#human-vs.-droid",
    "href": "starwars2/starwars_df2.html#human-vs.-droid",
    "title": "Starwars 2",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/restaurants/restaurants.html",
    "href": "posts/restaurants/restaurants.html",
    "title": "Restaurants",
    "section": "",
    "text": "Let’s analyze the restaurant data:\nrestaurant &lt;- read_csv('https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv')"
  },
  {
    "objectID": "posts/restaurants/restaurants.html#variable-description",
    "href": "posts/restaurants/restaurants.html#variable-description",
    "title": "Restaurants",
    "section": "Variable Description",
    "text": "Variable Description\nCAMIS: This is an unique identifier for the entity (restaurant); 10-digit integer\nDBA: This field represents the name (doing business as) of the entity (restaurant); Public business name, may change at discretion of restaurant owner BORO: Borough in which the entity (restaurant) is located.; • 1 = MANHATTAN • 2 = BRONX • 3 = BROOKLYN • 4 = QUEENS • 5 = STATEN ISLAND • 0 = Missing;\nCUISINE DESCRIPTION: This field describes the entity (restaurant) cuisine. ACTION: This field represents the actions that is associated with each restaurant inspection. ; • Violations were cited in the following area(s). • No violations were recorded at the time of this inspection. • Establishment re-opened by DOHMH • Establishment re-closed by DOHMH • Establishment Closed by DOHMH. • Violations were cited in the following area(s) and those requiring immediate action were addressed.\nVIOLATION CODE: Violation code associated with an establishment (restaurant) inspection VIOLATION DESCRIPTION: Violation description associated with an establishment (restaurant) inspection\nCRITICAL FLAG: Indicator of critical violation; • Critical • Not Critical • Not Applicable; Critical violations are those most likely to contribute to food-borne illness\nSCORE: Total score for a particular inspection;\nGRADE: Grade associated with the inspection; • N = Not Yet Graded • A = Grade A • B = Grade B • C = Grade C • Z = Grade Pending • P = Grade Pending issued on re-opening following an initial inspection that resulted in a closure"
  },
  {
    "objectID": "posts/restaurants/restaurants.html#summary-statistics",
    "href": "posts/restaurants/restaurants.html#summary-statistics",
    "title": "Restaurants",
    "section": "Summary Statistics",
    "text": "Summary Statistics\nFirst, we can find the mean, standard deviation, first quartile, median, third quartile, and maximum of SCORE for each GRADE of restaurants\n\nrestaurant %&gt;% group_by(GRADE) %&gt;% skim(SCORE) %&gt;% select(-n_missing)\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n17633\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nGRADE\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nGRADE\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSCORE\nA\n1\n9.26\n3.42\n0\n7\n10\n12\n13\n▁▂▂▅▇\n\n\nSCORE\nB\n1\n21.03\n4.16\n0\n18\n21\n24\n36\n▁▁▇▇▁\n\n\nSCORE\nC\n1\n38.56\n10.83\n0\n31\n36\n44\n86\n▁▇▇▂▁"
  },
  {
    "objectID": "posts/restaurants/restaurants.html#restaurant-grade",
    "href": "posts/restaurants/restaurants.html#restaurant-grade",
    "title": "Restaurants",
    "section": "Restaurant Grade",
    "text": "Restaurant Grade\nHow many restaurants with a GRADE of A are there in NYC?\nHow much percentage of restaurants in NYC are a GRADE of C?\n\nfreq &lt;- as.data.frame( table(restaurant$GRADE) )\nprop &lt;- as.data.frame( 100 * prop.table(table(restaurant$GRADE)) )"
  },
  {
    "objectID": "posts/restaurants/restaurants.html#relationship---score-grade-critical-flag",
    "href": "posts/restaurants/restaurants.html#relationship---score-grade-critical-flag",
    "title": "Restaurants",
    "section": "Relationship - Score, Grade, Critical Flag",
    "text": "Relationship - Score, Grade, Critical Flag\nWe will look at visualization to show how the distribution of SCORE varies by GRADE and CRITICAL FLAG.\n\nggplot(restaurant) +\n  geom_boxplot(aes(x = SCORE, y = GRADE, fill = GRADE) ) +\n  facet_grid( `CRITICAL FLAG` ~ . )\n\n\n\n\nWe could also show this same relationship using a histogram:\n\nggplot(restaurant) +\n  geom_histogram(aes(x = SCORE), binwidth = 1 ) +\n  facet_wrap( `CRITICAL FLAG` ~ GRADE, scales = 'free' )"
  },
  {
    "objectID": "posts/restaurants/restaurants.html#relationship---critical-flag-grade-boro",
    "href": "posts/restaurants/restaurants.html#relationship---critical-flag-grade-boro",
    "title": "Restaurants",
    "section": "Relationship - Critical Flag, Grade, Boro",
    "text": "Relationship - Critical Flag, Grade, Boro\nNext, we will look at how the proportion of CRITICAL FLAG varies by GRADE and BORO, this time using a barplot.\n\nggplot(restaurant) +\n  geom_bar(aes(x = `CRITICAL FLAG`,\n               y = after_stat(prop), group = 1)) +\n  facet_grid( GRADE ~ BORO )"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html",
    "href": "posts/beer-markets/beer-markets.html",
    "title": "Beer Markets",
    "section": "",
    "text": "Let’s analyze the beer_mkts data:\nbeer_mkts &lt;- read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#variable-description-for-beer_mkts-data.frame",
    "href": "posts/beer-markets/beer-markets.html#variable-description-for-beer_mkts-data.frame",
    "title": "Beer Markets",
    "section": "Variable Description for beer_mkts data.frame",
    "text": "Variable Description for beer_mkts data.frame\nThe following describes the variables in the beer_mkts data.frame.\n\nhh: Household identifier\n_purchase_desc: Description of the purchase\nquantity: The quantity of beer purchased\nbrand: The brand of beer\ndollar_spent: The amount spent\nbeer_floz: Fluid ounces of beer\nprice_per_floz: Price per fluid ounce\ncontainer: Type of container\npromo: Whether the purchase was on promotion\nmarket: The market where the purchase was made\nDemographics: age, employment status, degree, class of worker (cow), race, and household information like microwave, dishwasher, tvcable, singlefamilyhome, and npeople (number of people in the household)"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "href": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "title": "Beer Markets",
    "section": "Purchase Patterns",
    "text": "Purchase Patterns\nWe’ll explore the purchase patterns for beer purchases in the dataset. This will include finding the most popular brands and spending habits across different markets. Here are some specific analyses we can perform:\n\nFind top markets in terms of total quantity for each brand.\nCompare the proportion of loyal customers.\n\nI’ll begin with these analyses and create visualizations to help us understand the data better. I will start by finding the top 5 markets in terms of the total beer_floz.\n\ntop_5 &lt;- beer_mkts %&gt;% \n   group_by(market) %&gt;% \n   summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n   arrange(-beer_floz_tot) %&gt;% \n   slice(1:5)\n\nLet’s visualize the top 5 markets in terms of the total beer_floz.\n\nggplot(top_5, aes(x = market, y = beer_floz_tot)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Top 5 Beer Markets\",\n       x = \"Market\",\n       y = \"Total Beer (floz)\")\n\n\n\n\nNext, we can look at the top 5 markets in terms of the total beer_floz of a specific brand. For example, BUD LIGHT:\n\ntop_5_bud &lt;- beer_mkts %&gt;% \n  filter(brand == \"BUD LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nJust like the top 5 beer markets, let’s visualize the top 5 markets for BUD LIGHT.\n\nggplot(top_5_bud, aes(x = market, y = beer_floz_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Top 5 Beer Markets - Bud Light\",\n       x = \"Market\",\n       y = \"Total Beer (floz)\")\n\n\n\n\nI will do the same for BUSCH LIGHT, COORS LIGHT, MILLER LITE, and NATURAL LIGHT.\n\ntop_5_busch &lt;- beer_mkts %&gt;% \n  filter(brand == \"BUSCH LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\ntop_5_coors &lt;- beer_mkts %&gt;% \n  filter(brand == \"COORS LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\ntop_5_miller &lt;- beer_mkts %&gt;% \n  filter(brand == \"MILLER LITE\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\ntop_5_natural &lt;- beer_mkts %&gt;% \n  filter(brand == \"NATURAL LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nLet’s also look at a visualization for BUSCH LIGHT:\n\nggplot(top_5_busch, aes(x = market, y = beer_floz_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Top 5 Beer Markets - Busch Light\",\n       x = \"Market\",\n       y = \"Total Beer (floz)\")\n\n\n\n\nNext, we will evaluate proportions of loyal customers for each brand. For example, for households that purchased BUD LIGHT at least once, I will find the fraction of households that purchased only BUD LIGHT. I will find the proportion of loyal customers for all 5 brands.\n\nloyal_customers &lt;- beer_mkts %&gt;% \n  mutate(bud = ifelse(brand==\"BUD LIGHT\", 1, 0), # 1 if brand==\"BUD LIGHT\"; 0 otherwise\n         busch = ifelse(brand==\"BUSCH LIGHT\", 1, 0),\n         coors = ifelse(brand==\"COORS LIGHT\", 1, 0),\n         miller = ifelse(brand==\"MILLER LITE\", 1, 0),\n         natural = ifelse(brand==\"NATURAL LIGHT\", 1, 0),\n         .after = hh) %&gt;% \n  select(hh:natural) %&gt;%  # select the variables we need\n  group_by(hh) %&gt;% \n  summarise(n_transactions = n(), # number of beer transactions for each hh\n            n_bud = sum(bud), # number of BUD LIGHT transactions for each hh\n            n_busch = sum(busch), \n            n_coors = sum(coors), \n            n_miller = sum(miller), \n            n_natural = sum(natural) \n  ) %&gt;% \n  summarise(loyal_bud = sum(n_transactions == n_bud) / sum(n_bud &gt; 0), \n              # sum(n_transactions == n_bud) : the number of households that purchased BUD LIGHT only\n              # sum(n_bud &gt; 0) : the number of households that purchased BUD LIGHT at least once.\n            loyal_busch = sum(n_transactions == n_busch) / sum(n_busch &gt; 0),\n            loyal_coors = sum(n_transactions == n_coors) / sum(n_coors &gt; 0),\n            loyal_miller = sum(n_transactions == n_miller) / sum(n_miller &gt; 0),\n            loyal_natural = sum(n_transactions == n_natural) / sum(n_natural &gt; 0)\n  )"
  },
  {
    "objectID": "blog-post-title.html",
    "href": "blog-post-title.html",
    "title": "A. Brennan",
    "section": "",
    "text": "Beer Markets\n\n\n\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nAnn Brennan\n\n\n\n\n\n\n  \n\n\n\n\nHomework 5 - NFL\n\n\n\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nAnn Brennan\n\n\n\n\n\n\n  \n\n\n\n\nRestaurants\n\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nAnn Brennan\n\n\n\n\n\n\n  \n\n\n\n\nSpotify\n\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nAnn Brennan\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nAnn Brennan\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "12.1.html",
    "href": "12.1.html",
    "title": "Untitled",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntable1\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n# Spread across two tibbles\ntable4a  # cases\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\ntable4b\n\n# A tibble: 3 × 3\n  country         `1999`     `2000`\n  &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan   19987071   20595360\n2 Brazil       172006362  174504898\n3 China       1272915272 1280428583\n\ntable4a %&gt;% \n  pivot_longer(cols = c(`1999`, `2000`), \n               names_to = \"year\", \n               values_to = \"cases\")\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766"
  },
  {
    "objectID": "11.29.html",
    "href": "11.29.html",
    "title": "Untitled",
    "section": "",
    "text": "Section"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "A. Brennan Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nHomework 5 - NFL\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nAnn Brennan\n\n\n6 min\n\n\n\n\n\n\n  \n\n\n\n\nBeer Markets\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nAnn Brennan\n\n\n7 min\n\n\n\n\n\n\n  \n\n\n\n\nSpotify\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nAnn Brennan\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nRestaurants\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nAnn Brennan\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nAnn Brennan\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl-200-cw-10.html",
    "href": "danl-200-cw-10.html",
    "title": "Classwork 10 - Tidy Data",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\n\nbillboard &lt;- read_csv('https://bcdanl.github.io/data/billboard.csv')"
  },
  {
    "objectID": "danl-200-cw-10.html#question-1",
    "href": "danl-200-cw-10.html#question-1",
    "title": "Classwork 10 - Tidy Data",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\n\nbillboard &lt;- read_csv('https://bcdanl.github.io/data/billboard.csv')"
  },
  {
    "objectID": "danl-200-cw-10.html#q1a",
    "href": "danl-200-cw-10.html#q1a",
    "title": "Classwork 10 - Tidy Data",
    "section": "2 Q1a",
    "text": "2 Q1a\n\nDescribe how the distribution of rating varies across week 1, week 2, and week 3 using the faceted histogram.\n\n\nq1a &lt;- billboard %&gt;% \n  pivot_longer(cols = wk1:wk76,\n               names_to = \"week\",\n               values_to = \"rating\") %&gt;% \n  filter(week %in% c('wk1', 'wk2', 'wk3'))\nggplot(q1a,\n       aes(x = rating)) +\n  geom_histogram() +\n  facet_wrap(.~ week)"
  },
  {
    "objectID": "danl-200-cw-10.html#q1b",
    "href": "danl-200-cw-10.html#q1b",
    "title": "Classwork 10 - Tidy Data",
    "section": "3 Q1b",
    "text": "3 Q1b\n\nWhich artist(s) have the most number of tracks in billboard data.frame?\nDo not double-count an artist’s tracks if they appear in multiple weeks."
  },
  {
    "objectID": "danl-200-cw-10.html#question-2",
    "href": "danl-200-cw-10.html#question-2",
    "title": "Classwork 10 - Tidy Data",
    "section": "4 Question 2",
    "text": "4 Question 2\n\nny_pincp &lt;- read_csv('https://bcdanl.github.io/data/NY_pinc_wide.csv')"
  },
  {
    "objectID": "danl-200-cw-10.html#q2a",
    "href": "danl-200-cw-10.html#q2a",
    "title": "Classwork 10 - Tidy Data",
    "section": "5 Q2a",
    "text": "5 Q2a\n\nMake ny_pincp longer.\n\n\nq2a &lt;- ny_pincp %&gt;% \n  pivot_longer(cols = pincp1969:pincp2019,\n               names_to = \"year\",\n               values_to = \"pincp\")"
  },
  {
    "objectID": "danl-200-cw-10.html#q2b",
    "href": "danl-200-cw-10.html#q2b",
    "title": "Classwork 10 - Tidy Data",
    "section": "6 Q2b",
    "text": "6 Q2b\n\nProvide both (1) ggplot code and (2) a simple comment to describe how overall the yearly trend of NY counties’ average personal incomes are."
  },
  {
    "objectID": "danl-200-cw-10.html#question-3",
    "href": "danl-200-cw-10.html#question-3",
    "title": "Classwork 10 - Tidy Data",
    "section": "7 Question 3",
    "text": "7 Question 3\n\ncovid &lt;- read_csv('https://bcdanl.github.io/data/covid19_cases.csv')"
  },
  {
    "objectID": "danl-200-cw-10.html#q3a",
    "href": "danl-200-cw-10.html#q3a",
    "title": "Classwork 10 - Tidy Data",
    "section": "8 Q3a",
    "text": "8 Q3a\n\nKeep only the following three variables, date, countriesAndTerritories, and cases.\nThen make a wide-form data.frame of covid whose variable names are from countriesAndTerritories and values are from cases.\nThen drop the variable date."
  },
  {
    "objectID": "danl-200-cw-10.html#q3b",
    "href": "danl-200-cw-10.html#q3b",
    "title": "Classwork 10 - Tidy Data",
    "section": "9 Q3b",
    "text": "9 Q3b\n\nUse the wide-form data.frame of covid to find the top 10 countries in terms of the correlation between their cases and the USA case.\n\nUse cor(data.frame), which returns a matrix.\nThen convert it to data.frame using as.data.frame(matrix)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ann Brennan",
    "section": "",
    "text": "Ann Brennan is pursuing a major in Data Analytics and minor in Mathematics at SUNY Geneseo. Ann also competes for the SUNY Geneseo cross country and track and field teams."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Ann Brennan",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Data Analytics | Aug 2022 - May 2026  Minor in Mathematics"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Ann Brennan",
    "section": "Experience",
    "text": "Experience\nHF-L Technology | Technology Intern | June 2023 - Aug 2023"
  },
  {
    "objectID": "posts/homework/danl200-hw5-brennan-ann.html",
    "href": "posts/homework/danl200-hw5-brennan-ann.html",
    "title": "Homework 5 - NFL",
    "section": "",
    "text": "My Github repository: https://github.com/annbrennan/annbrennan.github.io\nThe following is the data.frame for Question 2.\nNFL2022_stuffs &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_stuffs.csv')"
  },
  {
    "objectID": "posts/homework/danl200-hw5-brennan-ann.html#variable-description",
    "href": "posts/homework/danl200-hw5-brennan-ann.html#variable-description",
    "title": "Homework 5 - NFL",
    "section": "Variable Description",
    "text": "Variable Description\nplay_id: Numeric play identifier that when used with game_id and drive provides the unique identifier for a single play game_id: Ten digit identifier for NFL game. drive: Numeric drive number in the game. week: Season week. posteam: String abbreviation for the team with possession. qtr: Quarter of the game (5 is overtime). half_seconds_remaining: Numeric seconds remaining in the half. down: The down for the given play. Basically you get four attempts (aka downs) to move the ball 10 yards (by either running with it or passing it). If you make 10 yards then you get another set of four downs. pass: Binary indicator if the play was a pass play. wp: Estimated winning probability for the posteam given the current situation at the start of the given play."
  },
  {
    "objectID": "posts/homework/danl200-hw5-brennan-ann.html#q2a",
    "href": "posts/homework/danl200-hw5-brennan-ann.html#q2a",
    "title": "Homework 5 - NFL",
    "section": "Q2a",
    "text": "Q2a\nIn data.frame, NFL2022_stuffs, remove observations for which values of posteam is missing.\n\nNFL2022_stuffs &lt;- na.omit(NFL2022_stuffs)"
  },
  {
    "objectID": "posts/homework/danl200-hw5-brennan-ann.html#q2b",
    "href": "posts/homework/danl200-hw5-brennan-ann.html#q2b",
    "title": "Homework 5 - NFL",
    "section": "Q2b",
    "text": "Q2b\nSummarize the mean value of pass for each posteam when all the following conditions hold: 1. wp is greater than 20% and less than 75%; 2. down is less than or equal to 2; and 3. half_seconds_remaining is greater than 120.\n\nq2b &lt;- NFL2022_stuffs %&gt;%\n  filter(wp &gt; 0.2 & wp &lt; 0.75 & down &lt;= 2 & half_seconds_remaining &gt; 120) %&gt;%\n  group_by(posteam) %&gt;%\n  summarise(mean_pass = mean(pass, na.rm = TRUE))"
  },
  {
    "objectID": "posts/homework/danl200-hw5-brennan-ann.html#q2c",
    "href": "posts/homework/danl200-hw5-brennan-ann.html#q2c",
    "title": "Homework 5 - NFL",
    "section": "Q2c",
    "text": "Q2c\nProvide both (1) a ggplot code with geom_point() using the resulting data.frame in Q2b and (2) a simple comments to describe the mean value of pass for each posteam.\nIn the ggplot, reorder the posteam categories based on the mean value of pass in ascending or in descending order.\n\nggplot(q2b, aes(x = reorder(posteam, mean_pass), y = mean_pass)) +\n  geom_point() +\n  labs(x = \"team with possession\",\n       y = \"percentage of pass plays\") +\n  coord_flip()\n\n\n\n\nThe teams listed at the top of the graph have the largest mean value of pass, whereas the teams at the bottom have the smallest mean value of pass. The teams are in descending order based on mean value of pass. CIN and KC have the highest mean value of pass. WAS and ATL have the lowest mean value of pass."
  },
  {
    "objectID": "posts/homework/danl200-hw5-brennan-ann.html#q2d",
    "href": "posts/homework/danl200-hw5-brennan-ann.html#q2d",
    "title": "Homework 5 - NFL",
    "section": "Q2d",
    "text": "Q2d\nConsider the following data.frame, NFL2022_epa:\n\nNFL2022_epa &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_epa.csv')\n\nCreate the data.frame, NFL2022_stuffs_EPA, that includes: - All the variables in the data.frame, NFL2022_stuffs; - The variables, passer, receiver, and epa, from the data.frame, NFL2022_epa. by joining the two data.frames.\nIn the resulting data.frame, NFL2022_stuffs_EPA, remove observations with NA in passer.\n\nNFL2022_stuffs_EPA &lt;- left_join(NFL2022_stuffs, NFL2022_epa[, c(\"play_id\", \"passer\", \"receiver\", \"epa\")], by = \"play_id\")\n\nNFL2022_stuffs_EPA &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(!is.na(passer))"
  },
  {
    "objectID": "posts/homework/danl200-hw5-brennan-ann.html#q2e",
    "href": "posts/homework/danl200-hw5-brennan-ann.html#q2e",
    "title": "Homework 5 - NFL",
    "section": "Q2e",
    "text": "Q2e\nProvide both (1) a single ggplot and (2) a simple comment to describe the NFL weekly trend of weekly mean value of epa for each of the following two passers, 1. “J.Allen” 2. “P.Mahomes”\n\nq2e &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(passer %in% c(\"J.Allen\", \"P.Mahomes\"))\n\nggplot(q2e, aes(x = week, y = epa, color = passer)) +\n  geom_line(stat = \"summary\", fun = \"mean\") +\n  labs(x = \"Week\",\n       y = \"Mean EPA\",\n       color = \"Passer\") + scale_color_manual(values = c(\"J.Allen\" = \"blue\", \"P.Mahomes\" = \"red\"))\n\n\n\n\nOverall, P. Mahomes generally had a higher mean EPA than J. Allen. However, in the most recent weeks, J. Allen’s mean EPA has risen significantly and is now much higher than P. Mahomes. Meanwhile, P. Mahomes’ mean EPA decreased slightly."
  },
  {
    "objectID": "posts/homework/danl200-hw5-brennan-ann.html#q2f",
    "href": "posts/homework/danl200-hw5-brennan-ann.html#q2f",
    "title": "Homework 5 - NFL",
    "section": "Q2f",
    "text": "Q2f\nCalculate the difference between the mean value of epa for “J.Allen” the mean value of epa for “P.Mahomes” for each value of week.\n\nmean_epa_by_week &lt;- q2e %&gt;%\n  group_by(passer, week) %&gt;%\n  summarise(mean_epa = mean(epa, na.rm = TRUE)) %&gt;% \n  pivot_wider(names_from = passer, values_from = mean_epa)\n\nmean_epa_by_week$epa_difference &lt;- mean_epa_by_week$`J.Allen` - mean_epa_by_week$`P.Mahomes`"
  },
  {
    "objectID": "posts/homework/danl200-hw5-brennan-ann.html#q2g",
    "href": "posts/homework/danl200-hw5-brennan-ann.html#q2g",
    "title": "Homework 5 - NFL",
    "section": "Q2g",
    "text": "Q2g\nSummarize the resulting data.frame in Q2d, with the following four variables:\n\nposteam: String abbreviation for the team with possession.\npasser: Name of the player who passed a ball to a receiver by initially taking a three-step drop, and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks.)\nmean_epa: Mean value of epa in 2022 for each passer\nn_pass: Number of observations for each passer\n\nThen find the top 10 NFL passers in 2022 in terms of the mean value of epa, conditioning that n_pass must be greater than or equal to the third quantile level of n_pass.\n\nsummary &lt;- NFL2022_stuffs_EPA %&gt;%\n  group_by(posteam, passer) %&gt;%\n  summarise(mean_epa = mean(epa, na.rm = TRUE),\n            n_pass = n())\n\nthird_quantile &lt;- quantile(summary$n_pass, 0.75)\n\nq2f &lt;- summary %&gt;%\n  filter(n_pass &gt;= third_quantile) %&gt;%\n  arrange(desc(mean_epa)) %&gt;%\n  slice_head(n = 10)"
  },
  {
    "objectID": "posts/spotify/spotify_df.html",
    "href": "posts/spotify/spotify_df.html",
    "title": "Spotify",
    "section": "",
    "text": "Let’s analyze the spotify data:\nspotify_all &lt;- read_csv('https://bcdanl.github.io/data/spotify_all.csv')"
  },
  {
    "objectID": "posts/spotify/spotify_df.html#variable-description-for-spotify-data.frame",
    "href": "posts/spotify/spotify_df.html#variable-description-for-spotify-data.frame",
    "title": "Spotify",
    "section": "Variable Description for spotify data.frame",
    "text": "Variable Description for spotify data.frame\nThe following describes the variables in the spotify data.frame.\npid: playlist ID; unique ID for playlist\nplaylist_name: a name of playlist\npos: a position of the track within a playlist (starting from 0)\nartist_name: name of the track’s primary artist\ntrack_name: name of the track\nduration_ms: duration of the track in milliseconds\nalbum_name: name of the track’s album"
  },
  {
    "objectID": "posts/spotify/spotify_df.html#popular-songs",
    "href": "posts/spotify/spotify_df.html#popular-songs",
    "title": "Spotify",
    "section": "Popular Songs",
    "text": "Popular Songs\nA value of a song is defined as a combination of a artist_name value and a track_name value.\nHere, I will find the 10 most popular songs and their respective artists.\n\ntop_10_songs &lt;- spotify_all %&gt;% \n  count(artist_name, track_name) %&gt;% \n  arrange(-n) %&gt;% \n  head(10)\ntop_10_songs\n\n# A tibble: 10 × 3\n   artist_name      track_name                              n\n   &lt;chr&gt;            &lt;chr&gt;                               &lt;int&gt;\n 1 Drake            One Dance                             143\n 2 Kendrick Lamar   HUMBLE.                               142\n 3 The Chainsmokers Closer                                129\n 4 DRAM             Broccoli (feat. Lil Yachty)           127\n 5 Post Malone      Congratulations                       119\n 6 Migos            Bad and Boujee (feat. Lil Uzi Vert)   117\n 7 KYLE             iSpy (feat. Lil Yachty)               115\n 8 Lil Uzi Vert     XO TOUR Llif3                         113\n 9 Aminé            Caroline                              107\n10 Khalid           Location                              102\n\n\nWe can visualize the top 10 songs on Spotify in this data.frame using a barplot:\n\nggplot(top_10_songs, aes(x = reorder(track_name, -n), y = n)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Top 10 Songs on Spotify\",\n       x = \"Song\",\n       y = \"Number of Occurrences\") + coord_flip()"
  },
  {
    "objectID": "posts/spotify/spotify_df.html#popular-artists",
    "href": "posts/spotify/spotify_df.html#popular-artists",
    "title": "Spotify",
    "section": "Popular Artists",
    "text": "Popular Artists\nWe can also find the most popular artists based on how many times their name occurs in the data. I will find the 5 most popular artists and each artist’s most popular song.\n\ntop_artists &lt;- spotify_all %&gt;% \n  group_by(artist_name) %&gt;% \n  mutate(n_popular_artist = n()) %&gt;% \n  ungroup() %&gt;% \n  mutate( artist_ranking = dense_rank( desc(n_popular_artist) ) ) %&gt;% \n  filter( artist_ranking &lt;= 5) %&gt;% \n  group_by(artist_name, track_name) %&gt;% \n  mutate(n_popular_track = n()) %&gt;% \n  group_by(artist_name) %&gt;% \n  mutate(track_ranking = dense_rank( desc(n_popular_track) ) ) %&gt;% \n  filter( track_ranking &lt;= 2) %&gt;%   # I just wanted to see the top two tracks for each artist\n  select(artist_name, artist_ranking, n_popular_artist, track_name, track_ranking, n_popular_track) %&gt;% \n  distinct() %&gt;% \n  arrange(artist_ranking, track_ranking)\n\ntop_artists\n\n# A tibble: 10 × 6\n# Groups:   artist_name [5]\n   artist_name    artist_ranking n_popular_artist track_name  track_ranking\n   &lt;chr&gt;                   &lt;int&gt;            &lt;int&gt; &lt;chr&gt;               &lt;int&gt;\n 1 Drake                       1             2715 One Dance               1\n 2 Drake                       1             2715 Jumpman                 2\n 3 Kanye West                  2             1065 Gold Digger             1\n 4 Kanye West                  2             1065 Stronger                2\n 5 Kendrick Lamar              3             1035 HUMBLE.                 1\n 6 Kendrick Lamar              3             1035 DNA.                    2\n 7 Rihanna                     4              915 Needed Me               1\n 8 Rihanna                     4              915 Work                    2\n 9 The Weeknd                  5              913 Starboy                 1\n10 The Weeknd                  5              913 The Hills               2\n# ℹ 1 more variable: n_popular_track &lt;int&gt;\n\n\nLet’s visualize the number of occurences of the top 5 artists on Spotify.\n\nggplot(top_artists, aes(x = artist_name, y = n_popular_artist)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Top 5 Artists on Spotify\",\n       x = \"Artist\",\n       y = \"Number of Occurrences\") + coord_flip()\n\n\n\n\nI am interested in looking at the relationship between pos and the ten most popular artists. Let’s visualize this.\n\ntop_10_artists &lt;- spotify_all %&gt;% \n  group_by(artist_name) %&gt;% \n  mutate(n_popular_artist = n()) %&gt;% \n  ungroup() %&gt;% \n  mutate( artist_ranking = dense_rank( desc(n_popular_artist) ) ) %&gt;% \n  filter( artist_ranking &lt;= 10) \n  \n# boxplot\nggplot(top_10_artists,\n       aes(x = pos, y = fct_reorder(artist_name, -artist_ranking)) ) +\n  geom_boxplot() +\n  stat_summary(\n    fun = mean,\n    color = 'red'\n  )"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL Project",
    "section": "",
    "text": "About this project 👏"
  },
  {
    "objectID": "project.html#variable-description",
    "href": "project.html#variable-description",
    "title": "DANL Project",
    "section": "2.1 Variable Description",
    "text": "2.1 Variable Description\n\nParty: a party (country) that provides a funding contribution to recipient country/region for their cliamte change project.\nRecipient country/region: Recipient country or region\nProject/programme/activity: Details in the climate change project\nType of support:\n\nadaptation if the climate change project is related to adaptation project.\nmitigation if the climate change project is related to mitigation project.\n\nYear: Year that funding contribution is committed or provided.\nContribution: An amount of funding contribution for the climate change project (in USD).\nStatus:\n\ncommitted if a party commits to providing the funding contribution for the climate change project, but the funding contribution is NOT actually provided.\nprovided if the funding contribution was provided for the climate change project.\n\nEnergy:\n\nTRUE if the project is energy-related;\nFALSE otherwise."
  },
  {
    "objectID": "project.html#summary-statistics",
    "href": "project.html#summary-statistics",
    "title": "DANL Project",
    "section": "2.2 Summary Statistics",
    "text": "2.2 Summary Statistics\n\n\n\n  \n\n\n\nskim(climate_finance) %&gt;% \n  select(-n_missing)\n\n\nData summary\n\n\nName\nclimate_finance\n\n\nNumber of rows\n16853\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nlogical\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nParty\n1.00\n5\n24\n0\n34\n0\n\n\nRecipient country/region\n1.00\n3\n293\n0\n1310\n0\n\n\nProject/programme/activity\n0.68\n3\n1473\n0\n7908\n0\n\n\nType of support\n1.00\n10\n10\n0\n2\n0\n\n\nStatus\n1.00\n8\n9\n0\n2\n0\n\n\n\nVariable type: logical\n\n\n\nskim_variable\ncomplete_rate\nmean\ncount\n\n\n\n\nEnergy\n1\n0.19\nFAL: 13710, TRU: 3143\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n1\n2015.72\n1.82\n2011\n2015\n2016\n2017\n2018\n▁▂▆▅▇\n\n\nContribution\n1\n3311433.39\n9714907.28\n3000\n100000\n420000\n2200000\n100000000\n▇▁▁▁▁"
  },
  {
    "objectID": "project.html#mpg-and-a-type-of-cars",
    "href": "project.html#mpg-and-a-type-of-cars",
    "title": "DANL Project",
    "section": "2.3 MPG and a Type of Cars",
    "text": "2.3 MPG and a Type of Cars\nThe following boxplot shows how the distribution of highway MPG (hwy) varies by a type of cars (class) 🚙 🚚 🚐.\n\nggplot(data = mpg) +\n  geom_boxplot(aes(x = class, y = hwy, fill = class),\n               show.legend = F) +\n  labs(x = \"Class\", y = \"Highway\\nMPG\")"
  }
]